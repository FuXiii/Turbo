#version 450 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, set = 0, binding = 0) uniform image3D imgOutput;
#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1.0 / float(0xffffffffU))
vec3 hash33(vec3 p)
{
    uvec3 q = uvec3(ivec3(p)) * UI3;
    q = (q.x ^ q.y ^ q.z) * UI3;
    return -1. + 2. * vec3(q) * UIF;
}
// Tileable 3D worley noise
float worleyNoise(vec3 uv, float freq)
{
    vec3 id = floor(uv);
    vec3 p = fract(uv);

    float minDist = 10000.;
    for (float x = -1.; x <= 1.; ++x)
    {
        for (float y = -1.; y <= 1.; ++y)
        {
            for (float z = -1.; z <= 1.; ++z)
            {
                vec3 offset = vec3(x, y, z);
                vec3 h = hash33(mod(id + offset, vec3(freq))) * .5 + .5;
                h += offset;
                vec3 d = p - h;
                minDist = min(minDist, dot(d, d));
            }
        }
    }

    // inverted worley noise
    return 1. - minDist;
}
float worleyFbm(vec3 p, float freq)
{
    return worleyNoise(p * freq, freq) * .625 + worleyNoise(p * freq * 2., freq * 2.) * .25 + worleyNoise(p * freq * 4., freq * 4.) * .125;
}
void main()
{
    vec3 color = vec3(0.0, 0.0, 0.0);
    vec3 uv = vec3(gl_GlobalInvocationID.x / 32., gl_GlobalInvocationID.y / 32., gl_GlobalInvocationID.z / 32.);
    ivec3 texelCoord = ivec3(gl_GlobalInvocationID.xyz);
    float freq = 4;
    color.r += worleyFbm(uv, freq);
    color.g += worleyFbm(uv, freq * 2.);
    color.b += worleyFbm(uv, freq * 4.);
    imageStore(imgOutput, texelCoord, vec4(color, 1.0));
}