#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_shader_clock : enable

struct HitPayload
{
    uint seed;
    uint depth;
    vec3 rayOrigin;
    vec3 rayDirection;
    vec3 weight;
    vec3 color;
};

struct PushConstant
{
    int accumulateFrame;
    float intensity;
    float roughness;
};

layout(push_constant) uniform PushConstant_
{
    PushConstant pc;
};

layout(location = 0) rayPayloadEXT HitPayload HIT_PAY_LOAD;

layout(set = 0, binding = 0) uniform accelerationStructureEXT TOP_LEVEL_AS;
layout(set = 0, binding = 1, rgba32f) uniform image2D IMAGE;
layout(set = 0, binding = 2) uniform RAY_TRACING_MATRIXS
{
    mat4 model;
    mat4 view;
    mat4 project;
}
rayTracingMatrixs;

uint tea(uint val0, uint val1)
{
    uint v0 = val0;
    uint v1 = val1;
    uint s0 = 0;

    for (uint n = 0; n < 16; n++)
    {
        s0 += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
    }

    return v0;
}

void main()
{
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5); // 像素中心点
    const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);      // 归一化 [0,1]
    vec2 ndc = uv * 2.0 - 1.0;                                     //[-1,1]，为归一化设备坐标（NDC）

    mat4 view_inverse = inverse(rayTracingMatrixs.view);
    mat4 project_inverse = inverse(rayTracingMatrixs.project);

    vec4 origin = view_inverse * vec4(0, 0, 0, 1);                  // 相机的世界坐标
    vec4 target = project_inverse * vec4(ndc.x, ndc.y, 1, 1);       // 像素中点(d.x, d.y)向前的向量乘以投影矩阵的逆得到，在View空间下该像素点的正前方向量
    vec4 direction = view_inverse * vec4(normalize(target.xyz), 0); // 归一化View空间下正前方向量，之后转到世界坐标系下

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    HIT_PAY_LOAD.color = vec3(0);
    HIT_PAY_LOAD.seed = seed;
    HIT_PAY_LOAD.depth = 0;
    HIT_PAY_LOAD.rayOrigin = origin.xyz;
    HIT_PAY_LOAD.rayDirection = direction.xyz;
    HIT_PAY_LOAD.weight = vec3(0);

    vec3 weight = vec3(1);
    vec3 color = vec3(0);

    for (; HIT_PAY_LOAD.depth < 10; HIT_PAY_LOAD.depth++)
    {
        traceRayEXT(TOP_LEVEL_AS,              // acceleration structure
                    ray_flags,                 // rayFlags
                    0xFF,                      // cullMask
                    0,                         // sbtRecordOffset
                    0,                         // sbtRecordStride
                    0,                         // missIndex
                    HIT_PAY_LOAD.rayOrigin,    // ray origin
                    t_min,                     // ray min range
                    HIT_PAY_LOAD.rayDirection, // ray direction
                    t_max,                     // ray max range
                    0                          // payload (location = 0)
        );

        color += HIT_PAY_LOAD.color * weight;
        weight *= HIT_PAY_LOAD.weight;
    }

    // Do accumulation over time
    if (pc.accumulateFrame > 0)
    {
        float a = 1.0f / float(pc.accumulateFrame + 1);
        vec3 old_color = imageLoad(IMAGE, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(IMAGE, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, color, a), 1.f));
    }
    else
    {
        // First frame, replace the value in the buffer
        imageStore(IMAGE, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.f));
    }
}
